import re
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.utils.deep_linking import create_start_link
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BotCommand, CallbackQuery, LabeledPrice
from buttons import *
from states import Links
from database.userservice import *
bot_router = Router()
async def check_channels(message):
    all_channels = get_channels_for_check()
    if all_channels != []:
        for i in all_channels:
            try:
                check = await message.bot.get_chat_member(i[0], user_id=message.from_user.id)
                if check.status in ["left"]:
                    await message.bot.send_message(chat_id=message.from_user.id,
                                                   text="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤",
                                                   reply_markup=await channels_in(all_channels))
                    return False

            except:
                pass
    return True
async def payment(message, amount):
    prices = [LabeledPrice(label="XTR", amount=amount)]
    await message.answer_invoice(
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
        description=f"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ {amount} –∑–≤—ë–∑–¥!",
        prices=prices,
        provider_token="",
        payload="bot_support",
        currency="XTR",
        reply_markup=await payment_keyboard(amount),
    )
@bot_router.message(CommandStart())
async def start(message: Message, state: FSMContext, command: BotCommand = None):
    channels_checker = await check_channels(message)
    checker = check_user(message.from_user.id)
    if not channels_checker:
        if not checker:
            new_link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
            link_for_db = new_link[new_link.index("=")+1:]
            add_user(message.from_user.id, link_for_db)
    else:
        if not checker:
            new_link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
            link_for_db = new_link[new_link.index("=") + 1:]
            add_user(message.from_user.id, link_for_db)

        if command.args:
            if not checker:
                new_link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
                link_for_db = new_link[new_link.index("=") + 1:]
                add_user(message.from_user.id, link_for_db)
                await message.bot.send_message(chat_id=message.from_user.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!",
                                               reply_markup= await main_menu_bt())
            link_user = get_user_by_link(command.args)
            if link_user:
                add_link_statistic(link_user)
                greeting = get_greeting(link_user)
                await message.bot.send_message(chat_id=message.from_user.id,
                                               text="üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É</b>, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª "
                                                    "—ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n"
                                                    "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω "
                                                    "–ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n"
                                                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è "
                                                    "(–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
                                                    "‚ö†Ô∏è<b> –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ!</b>", reply_markup=await cancel_in(),
                                               parse_mode="html")
                if greeting:
                    await message.bot.send_message(chat_id=message.from_user.id, text=greeting)
                await state.set_state(Links.send_st)
                await state.set_data({"link_user": link_user})
        if not command.args:
            link = await create_start_link(message.bot, get_user_link(message.from_user.id))
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"üöÄ <b>–ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                                f"–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nüëâ{link}\n\n"
                                                f"–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ "
                                                f"–¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨", parse_mode="html",
                                           reply_markup=await main_menu_bt())
@bot_router.callback_query(F.data.in_(["check_chan", "cancel", "pay10", "pay20", "pay50", "pay100", "pay500",
                                       "greeting_rem"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if query.data == "check_chan":
        checking = await check_channels(query)
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        if checking:
            await query.bot.send_message(chat_id=query.from_user.id, text="<b>–ì–æ—Ç–æ–≤–æ!\n\n"
                                                                          "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤–∞—à–µ–º—É –¥—Ä—É–≥—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ"
                                                                          " –µ–≥–æ —Å—Å—ã–ª–∫–µ –µ—â—ë —Ä–∞–∑ üîó</b>",
                                         parse_mode="html", reply_markup=await main_menu_bt())
    if query.data == "cancel":
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        link = await create_start_link(query.bot, get_user_link(query.from_user.id))
        await query.bot.send_message(chat_id=query.from_user.id,
                                     text=f"üöÄ <b>–ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                          f"–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nüëâ{link}\n\n"
                                          f"–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ "
                                          f"–¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨",
                                     parse_mode="html",
                                     reply_markup=await main_menu_bt())
    elif query.data == "pay10":
        await payment(query.message, 10)
    elif query.data == "pay20":
        await payment(query.message, 20)
    elif query.data == "pay50":
        await payment(query.message, 50)
    elif query.data == "pay100":
        await payment(query.message, 100)
    elif query.data == "pay500":
        await payment(query.message, 500)
    elif query.data == "greeting_rem":
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        change_greeting_user(tg_id=query.from_user.id)
        await query.bot.send_message(chat_id=query.from_user.id, text="–û—Ç–ª–∏—á–Ω–æ!\n\n"
                                                                      "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—á–∏—â–µ–Ω–æ!",
                                     reply_markup= await main_menu_bt())



@bot_router.callback_query(lambda call: "again_" in call.data)
async def again(query: CallbackQuery, state: FSMContext):
    link_user = int(query.data.replace("again_", ""))
    await query.bot.send_message(chat_id=query.from_user.id,
                                 text="üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É</b>, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª "
                                        "—ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n"
                                        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω "
                                        "–ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n"
                                        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è "
                                        "(–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
                                        "‚ö†Ô∏è<b> –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ!</b>", reply_markup=await cancel_in(),
                                 parse_mode="html")
    await state.set_state(Links.send_st)
    await state.set_data({"link_user": link_user})


@bot_router.message(Links.send_st)
async def anon_mes(message: Message, state: FSMContext):
    get_link = await state.get_data()
    receiver = get_link.get("link_user")
    sender_message_id = message.message_id
    text1 = "<b>–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n"
    text2 = "‚Ü©Ô∏è<i> –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>"
    caption = ""
    if message.caption:
        caption = message.caption + "\n\n"
    try:
        if message.voice:
            receiver_message = await message.bot.copy_message(chat_id=receiver, from_chat_id=message.from_user.id,
                                                              message_id=message.message_id, caption="<b>–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n"
                                                                                                     "‚Ü©Ô∏è<i>–°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>",
                                                              parse_mode="html")
            await message.bot.send_message(chat_id=message.from_user.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                                           reply_markup=await again_in(receiver))
            add_messages_info(sender_id=message.from_user.id, receiver_id=receiver, sender_message_id=sender_message_id,
                              receiver_message_id=receiver_message.message_id)
            await state.clear()
        elif message.video_note or message.sticker:
            await message.bot.copy_message(chat_id=receiver, from_chat_id=message.from_user.id,
                                           message_id=message.message_id)
            receiver_message = await message.bot.send_message(chat_id=receiver, text="<b>–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n"
                                                                                     "‚Ü©Ô∏è<i>–°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>", parse_mode="html")
            await message.bot.send_message(chat_id=message.from_user.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                                           reply_markup=await again_in(receiver))
            add_messages_info(sender_id=message.from_user.id, receiver_id=receiver, sender_message_id=sender_message_id,
                              receiver_message_id=receiver_message.message_id)
            await state.clear()
        elif message.video or message.photo or message.document:
            receiver_message = await message.bot.copy_message(chat_id=receiver, from_chat_id=message.from_user.id,
                                                              message_id=message.message_id, caption=text1+caption+text2,
                                                              parse_mode="html")
            await message.bot.send_message(chat_id=message.from_user.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                                           reply_markup=await again_in(receiver))
            add_messages_info(sender_id=message.from_user.id, receiver_id=receiver, sender_message_id=sender_message_id,
                              receiver_message_id=receiver_message.message_id)
            await state.clear()
        elif message.text:
            receiver_message = await message.bot.send_message(chat_id=receiver, text=text1+message.text+"\n\n"+text2, parse_mode="html")
            await message.bot.send_message(chat_id=message.from_user.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                                           reply_markup=await again_in(receiver))
            add_messages_info(sender_id=message.from_user.id, receiver_id=receiver, sender_message_id=sender_message_id,
                              receiver_message_id=receiver_message.message_id)
            await state.clear()
        else:
            await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup= await main_menu_bt())
            await state.clear()
    except:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                       reply_markup=await main_menu_bt())
        await state.clear()
@bot_router.message(Links.change_greeting)
async def change_greeting(message: Message, state: FSMContext):
    if message.text:
        new_greeting = "üëã" + message.text
        if 4 < len(new_greeting) < 301:
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text="üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 –∏ –¥–ª–∏–Ω–Ω–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=await main_menu_bt())
            await state.clear()
        else:
            await message.bot.send_message(chat_id=message.from_user.id, text=f"–û—Ç–ª–∏—á–Ω–æ!\n\n"
                                                                              f"–í–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ: {new_greeting}",
                                           reply_markup=await main_menu_bt())
            change_greeting_user(message.from_user.id, new_greeting)
            await state.clear()
    else:
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text="–û—à–∏–±–∫–∞! üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏",
                                       reply_markup=await main_menu_bt())
        await state.clear()
@bot_router.message(Links.change_link)
async def change_link(message: Message, state: FSMContext):
    if message.text:
        check = check_link(message.text)
        pattern = r'^[a-zA-Z0-9_]+$'
        check_pattern = re.search(pattern, message.text)
        if not check:
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text="üìõ –¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∫–µ–º-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ;(\n"
                                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
                                           reply_markup= await main_menu_bt())
            await state.clear()
        elif check_pattern and 6 < len(message.text) < 31:
            change_link_db(message.from_user.id, message.text)
            new_link = await create_start_link(message.bot, message.text)
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n"
                                                f"–¢–≤–æ—è –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n"
                                                f"üîó<code>{new_link}</code>\n\n"
                                                f"–ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏ –Ω–∞ –Ω–µ—ë. "
                                                f"–ó–∞—Ç–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ Instagram –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü. —Å–µ—Ç—è—Ö",
                                           parse_mode="html", reply_markup=await main_menu_bt())
            await state.clear()
        else:
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text="–û—à–∏–±–∫–∞! üìõ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.\n"
                                                "–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä - –æ—Ç 7 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
                                           reply_markup=await main_menu_bt())
            await state.clear()



@bot_router.message()
async def any_or_answer(message:Message, state: FSMContext):
    channels_checker = await check_channels(message)
    checker = check_user(message.from_user.id)
    check = None
    if message.reply_to_message:
        check = check_reply(message.reply_to_message.message_id)
    if not channels_checker:
        if not checker:
            new_link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
            link_for_db = new_link[new_link.index("=")+1:]
            add_user(message.from_user.id, link_for_db)
            await message.bot.send_message(chat_id=message.from_user.id, text="", reply_markup=await main_menu_bt())
    elif not checker:
        new_link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
        link_for_db = new_link[new_link.index("=") + 1:]
        add_user(message.from_user.id, link_for_db)

        await message.bot.send_message(chat_id=message.from_user.id,
                                       text=f"üöÄ <b>–ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                            f"–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nüëâ{new_link}\n\n"
                                            f"–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ "
                                            f"–¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨", parse_mode="html",
                                       reply_markup=await main_menu_bt())
    elif check:
        to_id = check[0]
        to_message = check[1]
        caption = ""
        try:
            if message.caption:
                caption = message.caption
            if message.voice:
                await message.bot.copy_message(chat_id=to_id, from_chat_id=message.from_user.id,
                                               message_id=message.message_id, reply_to_message_id=to_message,
                                               reply_markup=await again_in(message.from_user.id))
                await message.bot.send_message(chat_id=message.from_user.id, text="<b>–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> üò∫",
                                               reply_markup=await main_menu_bt(), parse_mode="html")
                add_answer_statistic(message.from_user.id)
            elif message.video_note or message.sticker or message.text:
                await message.bot.copy_message(chat_id=to_id, from_chat_id=message.from_user.id,
                                               message_id=message.message_id, reply_to_message_id=to_message,
                                               reply_markup=await again_in(message.from_user.id))
                await message.bot.send_message(chat_id=message.from_user.id, text="<b>–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> üò∫",
                                               reply_markup=await main_menu_bt(), parse_mode="html")
                add_answer_statistic(message.from_user.id)
            elif message.video or message.photo or message.document:
                await message.bot.copy_message(chat_id=to_id, from_chat_id=message.from_user.id,
                                               message_id=message.message_id,
                                               caption=caption,
                                               reply_to_message_id=to_message,
                                               reply_markup=await again_in(message.from_user.id))
                await message.bot.send_message(chat_id=message.from_user.id, text="<b>–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> üò∫",
                                               reply_markup=await main_menu_bt(), parse_mode="html")
                add_answer_statistic(message.from_user.id)
            else:
                await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
                                               reply_markup=await main_menu_bt())
        except:
            await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç",
                                           reply_markup=await main_menu_bt())
    else:
        if message.text == "‚òïÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞":
            await message.bot.send_message(chat_id=message.from_user.id, text="–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –±–æ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ "
                                                                              "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –∑–≤–µ–∑–¥–∞–º–∏‚≠êÔ∏è",
                                           reply_markup=await payment_amount_keyboard())
        elif message.text == "üëã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            await message.bot.send_message(chat_id=message.from_user.id, text="üëã–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. "
                                                                              "–ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, "
                                                                              "—É–≤–∏–¥–∏—Ç –µ–≥–æ.\n"
                                                                              "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 –∏ –¥–ª–∏–Ω–Ω–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤.",
                                           reply_markup= await greeting_in())
            await state.set_state(Links.change_greeting)
        elif message.text == "üìõ–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É":
            link = await create_start_link(message.bot, get_user_link(message.from_user.id))
            await message.bot.send_message(chat_id=message.from_user.id, text=f"–°–µ–π—á–∞—Å –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n"
                                                                              f"<code>{link}</code>\n\n"
                                                                              f"üìõ–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.\n\n"
                                                                              f"‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Å—ã–ª–∫–∏, —Å—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π!",
                                           parse_mode="html", reply_markup=await link_in())
            await state.set_state(Links.change_link)
        elif message.text == "üöÄ–ù–∞—á–∞—Ç—å":
            await state.clear()
            link = await create_start_link(message.bot, get_user_link(message.from_user.id))
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"üöÄ <b>–ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                                f"–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nüëâ{link}\n\n"
                                                f"–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ "
                                                f"–¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨",
                                           parse_mode="html",
                                           reply_markup=await main_menu_bt())
        elif message.text == "‚≠êÔ∏è–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            statistic = get_all_statistic(message.from_user.id)
            bot_info = await create_start_link(message.bot, str(message.from_user.id))
            bot_cor = bot_info.replace("https://t.me/", "")
            index = bot_cor.index("?")
            bot_username = bot_cor[:index]


            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                                                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {statistic.get("messages_today")}\n"
                                                f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {statistic.get("answers_today")}\n"
                                                f"üëÅ‚Äçüó® –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ —Å–µ–≥–æ–¥–Ω—è: {statistic.get("links_today")}\n"
                                                f"‚≠êÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {statistic.get("position_today")} –º–µ—Å—Ç–æ\n\n"
                                                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {statistic.get("messages_overall")}\n"
                                                f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {statistic.get("answers_overall")}\n"
                                                f"üëÅ‚Äçüó® –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {statistic.get("links_overall")}\n"
                                                f"‚≠êÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {statistic.get("position_overall")} –º–µ—Å—Ç–æ\n\n"
                                                f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è ‚≠êÔ∏è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å "
                                                f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n\n"
                                                f"@{bot_username}",
                                           parse_mode="html", reply_markup=await main_menu_bt())

        else:
            link = await create_start_link(message.bot, get_user_link(message.from_user.id))
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"üöÄ <b>–ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                                f"–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nüëâ{link}\n\n"
                                                f"–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ "
                                                f"–¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨", parse_mode="html",
                                           reply_markup=await main_menu_bt())