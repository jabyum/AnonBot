from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from buttons import *
from states import ChangeAdminInfo
from database.adminservice import *
# TODO id admina
admin_id = 558618720
admin_router = Router()

@admin_router.message(Command(commands=["admin"]))
async def admin_mm(message: Message):
    # TODO –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    if message.from_user.id == admin_id:
        count = get_users_count()
        await message.bot.send_message(message.from_user.id, f"üïµ–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞\n"
                                                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {count}",
                                       reply_markup=await admin_menu_in())
@admin_router.callback_query(F.data.in_(["cancel", "none",
                                         "change_channels", "add_channel", "delete_channel", "mailing"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if query.data == "cancel":
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        await state.clear()
    elif query.data == "none":
        pass
    elif query.data == "change_channels":
        text = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: \n"
        all_channels = get_channels_for_admin()
        if all_channels:
            for i in all_channels:
                text += (f"\n–ê–π–¥–∏ <b>–ü–û–î–ü–ò–°–ö–ò</b>: {i[0]}\n"
                         f"Username –∫–∞–Ω–∞–ª–∞: {i[1]}\n"
                         f"ID –∫–∞–Ω–∞–ª–∞: {i[2]}\n")
        await query.bot.send_message(query.from_user.id, text=text,
                                     reply_markup=await admin_channels_in(), parse_mode="html")
    elif query.data == "add_channel":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ–æ—Ä–º–∞—Ç: t.me/ –∏–ª–∏ https://t.me/)",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_url)
    elif query.data == "delete_channel":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID <b>–ü–û–î–ü–ò–°–ö–ò</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                     reply_markup=await cancel_bt(), parse_mode="html")
        await state.set_state(ChangeAdminInfo.delete_channel)
    elif query.data == "mailing":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.mailing)

@admin_router.message(ChangeAdminInfo.get_channel_url)
async def get_new_channel_url(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif "t.me/" in message.text.lower() or "https://t.me/" in message.text.lower():
        await state.set_data({"chan_url": message.text})
        await message.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞\n"
                                                             "–£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–π "
                                                             "–ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞-—Å–ø–æ–Ω—Å–æ—Ä–∞ –≤ –±–æ—Ç @getmyid_bot. "
                                                             "–ü–æ—Å–ª–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≥—Ä–∞—Ñ—ã 'Forwarded from chat:'",
                                       reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_id)
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.get_channel_id)
async def get_new_channel_id(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            chanel_url = await state.get_data()
            channel_id = int(message.text)
            if channel_id > 0:
                channel_id *= -1
            new_channel = add_new_channel_db(url=chanel_url["chan_url"], id=channel_id)
            if new_channel:
                await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n"
                                                                     f"‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∏ –¥–∞—Ç—å –µ–º—É –∞–¥–º–∏–Ω–∫—É(–ø—Ä–∞–≤–∞ –¥–∞–≤–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)‚ùóÔ∏è",
                                               reply_markup=await main_menu_bt())
                await state.clear()
            else:
                await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                                               reply_markup=await main_menu_bt())
                await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.delete_channel)
async def delete_channel(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text == "1":
        await message.bot.send_message(message.from_user.id, "üö´–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text != "1" and message.text.isdigit():
        try_del = delete_channel_db(int(message.text))
        if try_del:
            await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()
        else:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(ChangeAdminInfo.mailing)
async def mailing_admin(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        all_users = get_all_users_tg_id()
        success = 0
        unsuccess = 0
        for i in all_users:
            try:
                await message.bot.copy_message(chat_id=i, from_chat_id=message.from_user.id,
                                               message_id=message.message_id, reply_markup=message.reply_markup)
                success += 1
            except:
                unsuccess +=1
        await message.bot.send_message(message.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                                             f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                                                             f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {unsuccess}", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(F.text=="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å")
async def profile(message: Message, state: FSMContext):
    await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=await main_menu_bt())
    await state.clear()
